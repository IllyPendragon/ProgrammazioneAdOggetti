# ProgrammazioneAdOggetti
Progetto programmazione ad oggetti
# FootBall-data RestApi
1. [Introduzione all'API](#intro)
2. [Diagrammi UML](#uml)
4. [Postman](#postman)
5. [JSON](#js)
6. [Rotte](#rotte) 
7. [Autori](#autori)

<a name="intro"></a>
# Introduzione all'Api
L'Api [FootBall-data](https://www.football-data.org/documentation/quickstart) fornisce informazioni riguardanti le principali competizioni calcistiche.
Fornisce dati riguardanti le stagioni giocate dalle varie squadre, i punteggi ottenuti e i giocatori appartenenti alle determinate squadre.
Essa permetterà all'utente di filtrare i dati e ricevere statistiche precise.

## Statistiche generali
* Numero massimo, minimo, medio di squadre totali
* Durata media delle competizioni
* Quantità media di stagioni salvate per ogni competizione
## Statistiche in base alla competizione
* Numero stagioni salvate
* Squadra con il numero minore/maggiore di marcatori
* Media goal per marcatore
* Media goal per marcatore di ogni squadra
## Filtraggio
* Tutti i ruoli dei marcatori
* Un solo ruolo
* Numero minimo di Goal fatti

<a name="uml"></a>
# Diagrammi UML
Unified Modeling Language (UML) nasce come linguaggio standard per la creazione di modelli software nel 1997.
UML si può definire come linguaggio semi-formale e grafico, utilizzato per specificare, visualizzare, costruire e documentare un sistema software.
I diagrammi che fanno parte di UML possono essere:
* [Diagrammi dei casi d'uso](#uso)
* [Diagrammi delle classi](#classi)
* [Diagrammi delle sequanze](#sqz)

<a name="uso"></a>
## Diagramma dei casi d'uso
Questo diagramma definisce l'interazione dell'utente con il sistema, mostra la relazione tra l'utente e i differenti casi d'uso.

I casi d'uso sono una successione di interazioni elementari compiute dall'utente al sistema e le conseguenti risposte del sistema.

![alt text](https://github.com/IllyPendragon/ProgrammazioneAdOggetti/blob/main/UML/Football_0_0.jpg)
<a name="classi"></a>
## Diagramma delle classi
Descrive le caratteristiche statiche e dinamiche delle componenti (classi) e delle relazioni che ci sono tra le classi (associazioni).

![alt text](https://github.com/IllyPendragon/ProgrammazioneAdOggetti/blob/main/UML/Diagramma%20delle%20Classi.jpg)
<a name="sqz"></a>
## Diagramma delle sequenze
Permette di definire le interazioni dinamiche fra le entità.

# /competitions
![alt text](https://github.com/IllyPendragon/ProgrammazioneAdOggetti/blob/main/UML/Sequence%20DiagramCompetitions.jpg)
# /scorers
![alt text](https://github.com/IllyPendragon/ProgrammazioneAdOggetti/blob/main/UML/Sequence%20DiagramScorers.jpg)
# /statsCompetitions
![alt text](https://github.com/IllyPendragon/ProgrammazioneAdOggetti/blob/main/UML/Sequence%20DiagramStatsCompetitions.jpg)
# /statsScorers
![alt text](https://github.com/IllyPendragon/ProgrammazioneAdOggetti/blob/main/UML/Sequence%20DiagramStatsOnScorers.jpg)
<a name="postman"></a>
# Postman
Postman è un'applicazione che permette di costruire, testare e documentare Api più velocemente.Tramite Postman è possibile effettuare delle chiamate API senza dover modificare il codice dell’applicazione, fornendo, alla chiamata, un’utile interfaccia grafica.
Tramite l'interfaccia grafice è possibile selezionare la tipologia di chiamata che si vuole effettuare e impostare dati per l'autorizzazione della chiamata.
Possiamo effettuare diverse tipologie di chiamate:
* Chiamata di tipo GET

   Il metodo GET consiste nell’accodare all’indirizzo della pagina web (URL) i diversi parametri contenenti i dati che si vogliono trasmettere; all’URL originale        viene quindi aggiunto alla fine un punto interrogativo seguito dai parametri e dai dati da tarsferire.
   ### Eempio (url)
* Chiama di tipo POST

   Il metodo POST viene utilizzato impostando il parametro method come POST, i dati vengono inviati così con la richiesta HTTP senza essere visibili all’utente come      invece accade con il metodo GET; il metodo POST non ha limiti di dimensione delle informazioni scambiate.
   ### Esempio (url)
   
<a name="js"></a>   
# JSON
JSON (JavaScript Object Notation) è un semplice formato per lo scambio di dati, facile da leggere e scrivere.
È basato su due strutture:
  * Un insieme di coppie nome/valore.
  * Un elenco ordinato di valori.
   
Un oggetto è una serie non ordinata di nomi/valori, inizia con {parentesi graffa sinistra e finisce con }parentesi graffa destra. Ogni nome è seguito da :due punti e la coppia di nome/valore sono separate da ,virgola.

Un array è una raccolta ordinata di valori, comincia con [ parentesi quadra sinistra e finisce con ] parentesi quadra destra. I valori sono separati da ,virgola.

Un valore può essere una stringa tra virgolette, o un numero, o vero (true) o falso (false) o nullo (null), o un oggetto o un array. Queste strutture possono essere annidate.
<a name="rotte"></a>
# Rotte

<a name="autori"></a>
# Autori
 * Ilaria Rita Prencipe
 * Marisonia Ferrandino

